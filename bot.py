import os
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    CallbackContext,
    ConversationHandler,
    MessageHandler,
    filters,
)

# ุฌูุจ ุชููู ุงูุจูุช ูู ุงููุชุบูุฑุงุช ุงูุจูุฆูุฉ
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise ValueError("No TOKEN provided. Please set the TOKEN environment variable.")

# ุญุงูุงุช ุงููุญุงุฏุซุฉ
DAY_SELECTION, MEMORIZE, TEST = range(3)

# ูุงุฆูุฉ ุงููููุงุช ูู 30 ููููุง (ุจุนุฏ ุงูุชุนุฏูู)
WORDS = [
    "ุฑูุถุงูู ุดููุฑ ููููุก ุจุงูุฅุญุณุงู!",  # ุงูููู 1
    "ุฑุงุก ุฑูููุถูุงู: ุฑูุญูููุฉู ุงููู ููุตููุงุฆูููููุ ููุงูููููู: ููุบูููุฑูุชููู ูููููุคูููููููููุ ููุงูุถููุงุฏู: ุถูููุงูููู ููุฌูุฒูุงุกู ุงูุตููุงุฆููููููุ ููุงูุฃููููู: ุฅูุญูุณูุงูููู ููุทูุงุฆูุนููุ ูุงููููู: ูููุฑูู ูููููุญูุณูููููู",  # ุงูููู 2
    "ุฑูููุถูุงูู ุดูููุฑู ุงูุฅุญูุณูุงูู! ููุซููููู ููุงูุฃูููุ ูุงู ููุตูุฏูู ุนููู ุฃูุจูููุงุฆูููุง ุงููุชููุญูููุงูู ุนููููููู ูููุงู ุงููุชูุชูุงูู",  # ุงูููู 3
    "ููุตููู ุฑูุญูููุฉู ุฑูููุถูุงูู ููุณูุชูุฏูุนููู ุชูุญูุณููููู ุงูุฅูููููุงูู",  # ุงูููู 4
    "ุดูุฑูุทู ุฑูุญูููุฉู ุงููููููููููููููู: ุงูููููุงุกู! ูุญูุธูููุธู ุงููููุฑูุญููููููููู ุจูููุฏูุฑู ุงูุฅุณูููุงุกู ูุงููุตููููุงุก",  # ุงูููู 5
    "ุงููุฑููุญูููุฉู: ุตูููุฉู ุชูุชูุนูููููู ุจูุงููููุตูููุฑูุ ุนูููู ููุฌููู ุงููุฌูุจูุฑ",  # ุงูููู 6
    "ููุฒููููู ุงููุฑููุญูููุฉู ููุฑูุชููุจูุ ุจูุฅูุนูุฏูุงุฏู ุงููุฑููุญููููู ููููููููุฑููุจูุ ููุฅูููุฏูุงุฏู ุงููุฑููุญููููู ุจูุงููููุทูููุจู",  # ุงูููู 7
    "ุงูุฑุญูู ูุตูู ูุชุนูู ุจุงูุฅุนุฏุงุฏ! ูุงูุฑุญูู ูุตู ูุชุนูู ุจุงูุฅูุฏุงุฏ",  # ุงูููู 8
    "ุงูุฑููุญูููุฉู ุงูุฑููุจููุงูููููุฉ: ุชูููุณููุนู ุนูููู ุงูููุณูุชูุญููููููู ุจูุชูุฌููููููุงุชู ุฑูุญูููุงูููููุฉุ ููุชูุฑูุณููู ุนููููููู ุจูุชูุฌูููููุงุช ุฑูุญููููููููุฉ",  # ุงูููู 9
    "ุฑููุถู ุงูุฑููุญูููุฉ ุงูุฑููุจููุงูููููุฉ ููู ุจุงูุงุฑุชุญุงู! ุฃูุง ููู ุญูุฑูู ุงูููุตุงู ููููุณุชุฏุฑู ุงูุงุชุตุงูุ ูุฅูููู ูุง ููููููุทู ููู ุฑุญููุฉ ุงููู ุฅูุง ุงูุถูููููุงู",  # ุงูููู 10
    "ูุง ููุฏ ุญูููู ุงูููููุณููู ุงูุซุงูู ููุฑูููุถุงูุ ููููููููุจูู ุจุงูุชููุจุฉ ุงูุธุงูููููู ูุฃูููุณููู ุจุงูุนูุตููุงูุ ูููุฏ ุชูุฌููููู ุฑูุจูููุง ููููุจููุง ุจุงูุบูููุฑุงู",  # ุงูููู 11
    "ูุตู ูุบูุฑุฉ ุฑูุถุงู ูุณุชุฏุนู ุชุญุณูู ุงูุฅุฐุนุงู",  # ุงูููู 12
    "ุงูุงุณูุชูุบูููุงุฑู: ููุดูุชููููู ุนูููู ุงูุงุนูุชูุฐูุงุฑูุ ููุทูููุจู ุงูููุบูููุฑูุฉู ูููู ุงูููู ุงูุนูููููู ุงูุบููููุงุฑู",  # ุงูููู 13
    "ุฃููููู ุฏูุฑูุณ ุงุฎุชูุจุฑูุชู ุงูุจูุดูุฑูุฉู: ุขูููุฉ ุงูููุนุตูููุฉ ุงูููููููููุฉุ ูุชูุตูููุจ ุงูุนุงุตู ุจุขุซุงุฑูุง ุงูุฐููุงุชููููุฉุ ูู ููุนูุฒูู ุนูู ุญุงู ุงูุฃุญูุงู ุงูุดุฑุนูุฉ",  # ุงูููู 14
    "ุดุฌุฑุฉ ุขุฏู ุนููู ุงูุณูุงู ุญููุช ูุงุฏููุฉ ููููุชุฌ ุนู ุฅุตุงุจุชูุง ููุจูุดุฑ ุญููุงุฉ ุงูุนููุงุตูุฑ ุงูุฏููููููุฉุ ูููุง ุฐุงู ูููุง ุฃูุตููุจ ูุฃุตูุจูุช ุจู ูู ุตููุจู ุงูุฐููุฑูููุฉ",  # ุงูููู 15
    "ุงููุนุตูุฉ ูุงูุซูุฑุ ุชุญูู ูู ููุณูุง ุงูุถุฑุฑ! ูุฅุฐุง ุชุนุงุทุงูุง ุงูุนุงุตู ุฃููุน ููุณู ูู ุงูุฎุทุฑ",  # ุงูููู 16
    "ุงูุนุจุงุฏุฉู ูุตุฏุฑู ูู ูุตุงุฏุฑู ุตุญูุฉู ุญูุงุฉู ุงูุฌูู ูุงูุฅูุณ",  # ุงูููู 17
    "ุงูููุฑูุฏ ูููู ุฅูู ุดูุฎู ุฃูุฑุจ ููู ุฅูู ููุณูุ ููุง ููุฎูู ุนูู ุดุงุฑุฏุฉ ููุง ูุงุฑุฏุฉ",  # ุงูููู 18
    "ูุง ูุฒุงู ุงููู ูุชุฌูููู ุนูู ุงูุจุฑูููุฉ ุนููููุง ูุฎุตูุตูุงุ ูู ุจุฏุงูุฉู ุงูุชููููููู ุฅูู ุฃุจุฏู ุงูุขุจุฏูููู",  # ุงูููู 19
    "ุงูุญูุงุฉ ุงูุฏููููุง ูููุง ูุงุฏุฉ ุฌูุฑุซูููููุฉ! ุชูููุช ุฎูููู ูุฎูููู ุงููููุงุณุ ุจุญุณุจ ููุฏูุฑูุง ูู ูููุณูู",  # ุงูููู 20
    "ููุตููู ุนูุชููู ุฑูููุถูุงูู ููุณูุชูุฏูุนููู ุชูุญูุณููููู ุงูุฅูุชูููุงูู",  # ุงูููู 21
    "ุงููุงุฆุฏุฉ ุงูุชููุงูุฉ ูู ูููุฉ ุงููุฏุฑ ูุนููุฏุฉ ุจุญูุธ ุงูููุงูู ุงูุนุดุฑ",  # ุงูููู 22
    "'ุงูุนูุชููู ููู ุงููููุงุฑ' ููููุถู ูุชูุนููููู ุจุงูุฏููููุงุกูุฉู ุนูููู ููุฌููู ุงููุจูุฑูุงุกูุฉ",  # ุงูููู 23
    "ุงูุฏูููุงุกุฉ: ุขุซุงุฑ ุฃูุฑูุถููููุฉ ุชูุตูููุจ ุงููููููููุณู ุจุงูุชุฑุงู ุงูุฃุณูุจุงุจ ุงูุฏูููููููููููุฉุ ูุขุซุงุฑ ุนูุฏููุงูููููุฉ ุชูุตููุจูุง ุจุงูุชูุงู ุงูุญูุฑููุงุช ุงูุดููุฑุนููุฉ",  # ุงูููู 24
    "ุฅุฐุง ูู ุชุนุฑู ูุถู ุงูุฑุญูู ุณุชุจูู ุฏุงุฆุฑุง (ูุง ูุฑุงูุญุง) ูู ููุณ ุงูููุงู",  # ุงูููู 25
    "ุฅุฐุง ูู ูููู ูููุฉ ุงูุนุจุงุฏุฉ ูู ุชุชุฌุงูุฒ ุงูุนุงุฏุฉ",  # ุงูููู 26
    "ูุงุฆุฏุฉ: ุงูุธุฑูู ุงูุฃุฑุถูุฉ ูู ุงูุชู ุชุฌุนู ูููุฉ ุงููุฏุฑ ูุชุญุฑูุฉ ูู ูููุฉ ูุฃุฎุฑู ูู ููุงูู ูุชุฑ ุงูุนุดุฑ ุงูุฃุฎูุฑ ูู ุฑูุถุงูุ ูุฃูุง ูู ุงูุณููุงุช ูุซุงุจุชุฉ!",  # ุงูููู 27
    "ุงูุงุดุชุฑุงู: ูุงูุน ูู ุงูุตูุงุกุ ููุงุทุน ุนู ุงูุฅุฏุฑุงู",  # ุงูููู 28
    "ูุง ูู ููุฑุชุญู ุฑูููุถุงูุ ููุฏ ุจูุฑููู ุงูููุณุชุฌูููุจููู ุจุงูุงุฌุชูุงุน ูุงูุงุฌุชููุงุฏ ูู ุทุงุนุฉ ุงูุฑุญููุ ุจูููุง ุนููููู ุงูุบุงูููููู ูู ุงุชููุจุงุน ุงูููููู ูุงูุดููุทุงู. ูุง ุจููู! ุฃูุช ูุนูู ุจุงููุญุณููู ูุงููุณูุฆูู! ูููู: ุฑุจูููุง ุชูุจูู ูู ุงููุทูุนููุ ูุชุฌุงูุฒ ุนู ุงูุนุงุตููุ ูุจุงุฑู ูููููู ุงููุคููููุ ุจุฑุญูุชู ูุง ุฃุฑุญู ุงูุฑุงุญููู",  # ุงูููู 29
    "ููุฑูุชูุญููู ุฑูููุถูุงูู ุจุงูุตููุงูุญููููู ูุฎูููุฑูุ ูููู ุงููููููุตููุฑููููู ููููููููุฑูุ ููุนูููู ุงูุบูุงูููููููู ุดูุงููุฏู ููููููุฑู",  # ุงูููู 30
]

# ุงููููุงุช ุงููุณุชุฎุฏูุฉ ูุจุงุดุฑุฉ ูุงููุฉ
FULL_WORDS = WORDS

# ุฏุงูุฉ ูุฅุฒุงูุฉ ุงูุชุดููู ูู ุงููุตูุต
def remove_tashkeel(text):
    tashkeel = (
        '\u064B', '\u064C', '\u064D', '\u064E', '\u064F', '\u0650', '\u0651', '\u0652',
        '\u0653', '\u0654', '\u0655', '\u0656', '\u0657', '\u0658', '\u0659', '\u065A',
        '\u065B', '\u065C', '\u065D', '\u065E', '\u065F', '\u0670'
    )
    for mark in tashkeel:
        text = text.replace(mark, '')
    return text

# ุญูุธ ุจูุงูุงุช ุงููุณุชุฎุฏู
user_data = {}

# ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ
async def start(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {"memorized_words": []}

    context.user_data.clear()
    context.user_data["current_words"] = FULL_WORDS
    await show_days(update, context)
    return DAY_SELECTION

async def show_days(update: Update, context: CallbackContext):
    user_id = update.callback_query.from_user.id if update.callback_query else update.message.from_user.id
    words = context.user_data["current_words"]

    keyboard = []
    for i in range(0, 30, 3):
        row = [
            InlineKeyboardButton(
                f"ุงูููู {i+1}{' โ' if words[i] in user_data[user_id]['memorized_words'] else ''}",
                callback_data=f"day_{i}"
            ),
            InlineKeyboardButton(
                f"ุงูููู {i+2}{' โ' if words[i+1] in user_data[user_id]['memorized_words'] else ''}",
                callback_data=f"day_{i+1}"
            ) if i + 1 < len(words) else None,
            InlineKeyboardButton(
                f"ุงูููู {i+3}{' โ' if words[i+2] in user_data[user_id]['memorized_words'] else ''}",
                callback_data=f"day_{i+2}"
            ) if i + 2 < len(words) else None,
        ]
        keyboard.append([btn for btn in row if btn])

    if user_data[user_id]["memorized_words"]:
        keyboard.append([InlineKeyboardButton("๐ ูุฑุงุฌุนุฉ", callback_data="review")])
        keyboard.append([InlineKeyboardButton("๐ ุงุฎุชุจุงุฑ ุดุงูู", callback_data="test_all")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    message = (
        "๐ *ุฑุญูุฉ ุญูุธ ุงููููุงุช ุงูุนููุฉ ูู ุดูุฑ ุฑูุถุงู ุงููุจุงุฑู* ๐\n\n"
        "โจ ุงูุทูู ูู ูุบุงูุฑุฉ ููููุฉ ูุน ูููุงุช ุงูุญููุฉ ูุงููุนุฑูุฉ ูู ุดูุฑ ุงูุฎูุฑ\n"
        "๐ ุงุฎุชุฑ ุงูููู ูุงุญูุธ ุงููููุฉ ุซู ุงุถุบุท *ุชู ุงูุญูุธ* ๐\n"
        "๐ ุงุณุชูุชุน ุจูุฑุงุฌุนุฉ ูููุฒู ุงููุญููุธุฉ ุนุจุฑ ุฒุฑ *ูุฑุงุฌุนุฉ* โจ\n"
        "๐ ุฃู ุชุญุฏูู ููุณู ุจุงุฎุชุจุงุฑ ุดุงูู ูู ุฎูุงู ุฒุฑ *ุงุฎุชุจุงุฑ ุดุงูู* ๐"
    )
    if update.callback_query:
        await update.callback_query.edit_message_text(message, reply_markup=reply_markup, parse_mode="Markdown")
    else:
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode="Markdown")
    return DAY_SELECTION

# ุนุฑุถ ุงููููุฉ ููุญูุธ ุฃู ุงููุฑุงุฌุนุฉ
async def select_day(update: Update, context: CallbackContext):
    await update.callback_query.answer()
    user_id = update.callback_query.from_user.id
    day_index = int(update.callback_query.data.split("_")[1])
    words = context.user_data["current_words"]
    word = words[day_index]

    if word in user_data[user_id]["memorized_words"]:
        keyboard = [
            [InlineKeyboardButton("๐ ุฑุฌูุน", callback_data="back_to_days")],
        ]
    else:
        keyboard = [
            [InlineKeyboardButton("โ ุชู ุงูุญูุธ", callback_data=f"memorize_{day_index}")],
            [InlineKeyboardButton("๐ ุฑุฌูุน", callback_data="back_to_days")],
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(
        f"๐ *ุงูููู {day_index + 1}*\n\n{word}",
        reply_markup=reply_markup,
        parse_mode="Markdown",
    )
    return MEMORIZE

# ูุนุงูุฌุฉ ุงูุญูุธ
async def memorize_word(update: Update, context: CallbackContext):
    await update.callback_query.answer()
    user_id = update.callback_query.from_user.id
    day_index = int(update.callback_query.data.split("_")[1])
    word = context.user_data["current_words"][day_index]

    if word not in user_data[user_id]["memorized_words"]:
        user_data[user_id]["memorized_words"].append(word)

    await update.callback_query.edit_message_text("โ *ุชู ุงูุญูุธ ุจูุฌุงุญ!*", parse_mode="Markdown")
    await show_days(update, context)
    return DAY_SELECTION

# ูุฑุงุฌุนุฉ ุงููููุงุช ุงููุญููุธุฉ
async def review(update: Update, context: CallbackContext):
    await update.callback_query.answer()
    user_id = update.callback_query.from_user.id
    memorized = user_data[user_id]["memorized_words"]

    if not memorized:
        await update.callback_query.edit_message_text(
            "๐ *ูู ุชุถู ูููุงุช ุฅูู ููุฒู ุจุนุฏ!*",
            parse_mode="Markdown"
        )
    else:
        review_text = "๐ *ูููุฒู ุงููุญููุธุฉ:*\n\n" + "\n".join(memorized)
        keyboard = [[InlineKeyboardButton("๐ ุฑุฌูุน", callback_data="back_to_days")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(
            review_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    return DAY_SELECTION

# ุงุฎุชุจุงุฑ ุดุงูู
async def start_test(update: Update, context: CallbackContext):
    await update.callback_query.answer()
    user_id = update.callback_query.from_user.id
    memorized = user_data[user_id]["memorized_words"]

    if not memorized:
        await update.callback_query.edit_message_text(
            "๐ *ูุง ูููุงุช ูุญููุธุฉ ูุงุฎุชุจุงุฑูุง ุจุนุฏ!*",
            parse_mode="Markdown"
        )
        return DAY_SELECTION

    context.user_data["test_words"] = memorized  # ุงุณุชุฎุฏุงู ุงููููุงุช ุงููุงููุฉ ูุจุงุดุฑุฉ
    context.user_data["last_question"] = None
    await ask_next_question(update, context)
    return TEST

async def ask_next_question(update: Update, context: CallbackContext):
    words = context.user_data["test_words"]
    last_question = context.user_data.get("last_question")

    word_phrase = random.choice(words)
    while words and len(words) > 1 and last_question and last_question["q"].split(" ")[0] in word_phrase:
        word_phrase = random.choice(words)

    word_parts = word_phrase.split()
    if len(word_parts) < 2:
        question = word_phrase
        correct_answer = word_phrase
    else:
        blank_pos = random.randint(0, len(word_parts) - 1)
        if last_question and len(words) >= 1:
            last_blank_pos = last_question["q"].split().index("ููููููู")
            while blank_pos == last_blank_pos and len(word_parts) > 1:
                blank_pos = random.randint(0, len(word_parts) - 1)

        correct_answer = word_parts[blank_pos]
        word_parts[blank_pos] = "ููููููู"
        question = " ".join(word_parts)

    context.user_data["current_question"] = {"q": question, "a": correct_answer}
    context.user_data["last_question"] = {"q": question, "a": correct_answer}

    await (update.callback_query.edit_message_text if hasattr(update, 'callback_query') and update.callback_query else update.message.reply_text)(
        f"๐ *ุงููุฃ ุงููุฑุงุบ:*\n\n{question}",
        parse_mode="Markdown",
    )

async def handle_test_answer(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    user_answer = update.message.text.strip()
    question = context.user_data["current_question"]

    # ุฅุฒุงูุฉ ุงูุชุดููู ูู ุงูุฅุฌุงุจุฉ ุงูููุฏุฎูุฉ ูุงูุฅุฌุงุจุฉ ุงูุตุญูุญุฉ
    user_answer_clean = remove_tashkeel(user_answer).lower()
    correct_answer_clean = remove_tashkeel(question["a"]).lower()

    keyboard = [
        [InlineKeyboardButton("โก๏ธ ุณุคุงู ุขุฎุฑ", callback_data="next_question")],
        [InlineKeyboardButton("๐ ุฑุฌูุน", callback_data="back_to_days")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if user_answer_clean == correct_answer_clean:
        result = "โ *ุฅุฌุงุจุฉ ุตุญูุญุฉ!*\n\n" + f"ุงูุฅุฌุงุจุฉ: {question['a']}"
    else:
        result = f"โ *ุฅุฌุงุจุฉ ุฎุงุทุฆุฉ!* ุงูุฅุฌุงุจุฉ ุงูุตุญูุญุฉ: {question['a']}"

    await update.message.reply_text(result, reply_markup=reply_markup, parse_mode="Markdown")
    return TEST

async def next_question(update: Update, context: CallbackContext):
    await update.callback_query.answer()
    await ask_next_question(update, context)
    return TEST

# ุงูุฑุฌูุน ูุงุฎุชูุงุฑ ุงูููู
async def back_to_days(update: Update, context: CallbackContext):
    await update.callback_query.answer()
    await show_days(update, context)
    return DAY_SELECTION

# ูุนุงูุฌุฉ ุงููุชุงุจุฉ ุงูุนุดูุงุฆูุฉ ูุฅุนุงุฏุฉ ุงููุณุชุฎุฏู ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ
async def handle_text(update: Update, context: CallbackContext):
    current_state = context.user_data.get("state", DAY_SELECTION)
    if current_state != TEST:
        await show_days(update, context)
        return DAY_SELECTION

# ุฅุนุฏุงุฏ ุงูุจูุช ูุชุดุบููู
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            DAY_SELECTION: [
                CallbackQueryHandler(select_day, pattern="^day_"),
                CallbackQueryHandler(review, pattern="^review$"),
                CallbackQueryHandler(start_test, pattern="^test_all$"),
                CallbackQueryHandler(back_to_days, pattern="^back_to_days$"),
            ],
            MEMORIZE: [
                CallbackQueryHandler(memorize_word, pattern="^memorize_"),
                CallbackQueryHandler(back_to_days, pattern="^back_to_days$"),
            ],
            TEST: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_test_answer),
                CallbackQueryHandler(next_question, pattern="^next_question$"),
                CallbackQueryHandler(back_to_days, pattern="^back_to_days$"),
            ],
        },
        fallbacks=[
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text),
            CommandHandler("start", start),
        ],
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
